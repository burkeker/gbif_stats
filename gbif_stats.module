<?php

define('GBIF_STATS_SERVICE_URL', 'http://burke.gbif.org/gbif/stats/services');

/**
 * Implementation of hook_menu().
 */
function gbif_stats_menu() {
  $items['gbif/stats'] = array(
    'title' => 'Statistics',
    'description' => 'Statistics about GBIF Network',
    'page callback' => 'gbif_stats_global_view',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
  );
  $items['gbif/stats/services'] = array(
    'page callback' => 'gbif_stats_services',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/gbif_stats'] = array(
    'title' => 'GBIF Statistics',
    'description' => 'Available options for configuring the GBIF Statistics.',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/gbif_stats/settings'] = array(
    'title' => 'GBIF Statistics Configuration',
    'description' => 'Configurations and various options to update statistics.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gbif_stats_admin_settingsform'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'gbif_stats.admin.inc',
  );
  return $items;
}

function gbif_stats_services($type = '', $region = '') {
  switch ($type) {
    case 'publication':
      $publication = file_get_contents(file_build_uri('gbif_stats/publication_stats.json'));
      print_r($publication);
      break;
    case 'membership':
      $file = 'gbif_stats/' . $type . '_' . $region . '.json';
      $membership = file_get_contents(file_build_uri($file));
      print_r($membership);
      break;
    case 'occurrence':
      $file = 'gbif_stats/' . $type . 'Table_' . $region . '.json';
      $occurrence = file_get_contents(file_build_uri($file));
      print_r($occurrence);
      break;
    case 'geo':
      $geo = file_get_contents(file_build_uri('gbif_stats/geo_world.json'));
      print_r($geo);
      break;
    case 'documents':
      $docs = file_get_contents(file_build_uri('gbif_stats/documents.json'));
      print_r($docs);
      break;
  }
}

/*
 * Implementation of hook_library()
 */
function gbif_stats_library() {
  $libraries['d3'] = array(
    'title' => 'd3 data visualisation',
    'website' => 'http://d3js.org',
    'version' => '2.9.1',
    'js' => array(
      /*
      'http://d3js.org/d3.v2.js' => array(
        'type' => 'external',
        'weight' => -20,
      ),
      */
      drupal_get_path('module', 'gbif_stats') . '/js/d3.v2.js' => array(
        'type' => 'file',
        'scope' => 'footer',
        'weight' => 20,
      ),      
      drupal_get_path('module', 'gbif_stats') . '/js/d3.geo.js' => array(
        'type' => 'file',
        'scope' => 'footer',
        'weight' => 20,
      ),
    ),  
  );
  $libraries['gbif_global_overview'] = array(
    'title' => 'GBIF global overview',
    'website' => 'http://data.gbif.org',
    'version' => '0',
    'js' => array(
      drupal_get_path('module', 'gbif_stats') . '/js/global_map_front.js' => array(
        'type' => 'file',
        'scope' => 'footer',
        'weight' => 20,
      ),
      drupal_get_path('module', 'gbif_stats') . '/js/jquery.dataTables.min.js' => array(
        'type' => 'file',
        'scope' => 'footer',
        'weight' => 21,
      ),
    ),
    'css' => array(
      drupal_get_path('module', 'gbif_stats') . '/css/published.css' => array(
        'type' => 'file',
        'media' => 'all',
      ),
      drupal_get_path('module', 'gbif_stats') . '/css/dataGrid.css' => array(
        'type' => 'file',
        'media' => 'all',
      ),
      drupal_get_path('module', 'gbif_stats') . '/css/map.css' => array(
        'type' => 'file',
        'media' => 'all',
      ),
      drupal_get_path('module', 'gbif_stats') . '/css/colorbrewer.css' => array(
        'type' => 'file',
        'media' => 'all',
      ),
    ),
  );
  return $libraries;
}

/*
 * Default overview page
 * Could be a global view but right now is just a placeholder.
 */
function gbif_stats_global_view() {

  // Prepare the data grid table
  $table = '';
  $table .= '<table cellpadding="0" cellspacing="0" border="0" class="display" id="dataGrid">';
  $table .= '<thead>';
  $table .= '<tr>';
  $table .= '<th>Node</th>';
  $table .= '<th>Status</th>';
  $table .= '<th>Node</th>';
  $table .= '<th>Org Nr.</th>';
  $table .= '<th>Res.</th>';
  $table .= '<th>IPT</th>';
  $table .= '<th>chk dst</th>';
  $table .= '<th>chk usg</th>';
  $table .= '<th>Provider</th>';
  $table .= '<th>Occu dst</th>';
  $table .= '<th>Occu</th>';
  $table .= '<th>Geo Occu</th>';
  $table .= '</tr>';
  $table .= '</thead>';
  $table .= '<tbody><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></tbody>';
  $table .= '</table>';

  $page_content = '';
  $page_content .= '<div class="gallery" id="chart">';
  $page_content .= '</div>';
  $page_content .= '<article>';
  $page_content .= '<p>';
  //$page_content .= t('This page shows membership status of GBIF and overall data growth.');
  $page_content .= '</p>';

  //$page_content .= $table;


  $regions = variable_get('regions');
  $regionsURL = array();
  foreach ($regions as $region => $region_name) {
    $url = $GLOBALS['base_url'] . "/gbif/stats#" . $region;
    $regionsURL[$region] = l($region_name, $url);
  }

  $json_location = array();
  $regions = variable_get('regions');
  foreach ($regions as $i => $v) {
    // GeoJSON
    $filenameGeo = 'gbif_stats/geo_' . $i . '.json';
    $destGeo = file_build_uri($filenameGeo);

    // Used by MAP tipsy
    $filename = 'gbif_stats/membership_' . $i . '.json';
    $destMembership = file_build_uri($filename);

    // Used by DataTables
    $filenameOccTable = 'gbif_stats/occurrenceTable_' . $i . '.json';
    $destOccTable = file_build_uri($filenameOccTable);

    $json_location['geo'][$i] = file_create_url($destGeo);
    $json_location['membership'][$i] = file_create_url($destMembership);
    $json_location['forTable'][$i] = file_create_url($destOccTable);
  }
  
  $json_location['membership']['world'] = file_create_url(file_build_uri('gbif_stats/membership_world.json'));
  $json_location['geo']['world'] = file_create_url(file_build_uri('gbif_stats/geo_world.json'));
  $json_location['publication_stats']['world'] = file_create_url(file_build_uri('gbif_stats/publication_stats.json'));
  
  drupal_add_library('gbif_stats', 'd3', FALSE);
  drupal_add_library('gbif_stats', 'gbif_global_overview', FALSE);
  drupal_add_js(array('gbif_stats' => $regionsURL, 'json_location' => $json_location), 'setting');

  $membership = json_decode(file_get_contents($json_location['membership']['world']), TRUE);
  
  $member_voting_signed = array(
    'items' => array(),
    'type' => 'ol',
    'title' => 'Voting Participtants',
    'attributes' => array(
      'id' => 'list-voting'
    )
  );
  $member_associate_signed = array(
    'items' => array(),
    'type' => 'ol',
    'title' => 'Associate Country Participtants',
    'attributes' => array(
      'id' => 'list-associate'
    )
  );
  $member_other_signed = array(
    'items' => array(),
    'type' => 'ol',
    'title' => 'Other Associate Participtants',
    'attributes' => array(
      'id' => 'list-other'
    )
  );
  $member_voting_unsigned = array(
    'items' => array(),
    'type' => 'ol',
    'title' => 'Voting Participtants',
    'attributes' => array(
      'id' => 'list-voting'
    )
  );
  $member_associate_unsigned = array(
    'items' => array(),
    'type' => 'ol',
    'title' => 'Associate Country Participtants',
    'attributes' => array(
      'id' => 'list-associate'
    )
  );
  $member_other_unsigned = array(
    'items' => array(),
    'type' => 'ol',
    'title' => 'Other Associate Participtants',
    'attributes' => array(
      'id' => 'list-other'
    )
  );
  
  foreach ($membership as $type => $member) {
    foreach ($member as $membername => $p ) {
      if ($p['MOU2012'] == 'signed') {
        switch($p['GBIFMembership']) {
          case 'Voting Participant':
            array_push($member_voting_signed['items'], $membername);
            break;
          case 'Associate Country Participant':
            array_push($member_associate_signed['items'], $membername);
            break;
          case 'Other Associate Participant':
            array_push($member_other_signed['items'], $membername);
            break;
        }
      } elseif ($p['MOU2007'] == 'signed' && $p['MOU2012'] == 'unsigned') {
        switch($p['GBIFMembership']) {
          case 'Voting Participant':
            array_push($member_voting_unsigned['items'], $membername);
            break;
          case 'Associate Country Participant':
            array_push($member_associate_unsigned['items'], $membername);
            break;
          case 'Other Associate Participant':
            array_push($member_other_unsigned['items'], $membername);
            break;
        }
      }
    }    
  }
  sort($member_voting_signed['items']);
  sort($member_associate_signed['items']);
  sort($member_other_signed['items']);
  sort($member_voting_unsigned['items']);
  sort($member_associate_unsigned['items']);
  sort($member_other_unsigned['items']);
  
  $page_content .= '<div id="participant-list">';
  $page_content .= '<h4>Signature of MOU 2012</h4>';
  $page_content .= '<div class="grid-7">'.theme_item_list($member_voting_signed).'</div>';
  $page_content .= '<div class="grid-8">'.theme_item_list($member_associate_signed).'</div>';
  $page_content .= '<div class="grid-8">'.theme_item_list($member_other_signed).'</div>';
  $page_content .= '<div class="clearfix"></div>';
  $page_content .= '<h4>GBIF Participants as of end 2011 that have not yet signed the MOU 2012-</h4>';
  $page_content .= '<div class="grid-7">'.theme_item_list($member_voting_unsigned).'</div>';
  $page_content .= '<div class="grid-8">'.theme_item_list($member_associate_unsigned).'</div>';
  $page_content .= '<div class="grid-8">'.theme_item_list($member_other_unsigned).'</div>';
  $page_content .= '<div class="clearfix"></div>';
  $page_content .= '</div>';
  $page_content .= '</article>';

  return $page_content;
}


/**
 * Get participant list according to membership type
 */
function list_participants($type, $region_to_load) {

  $records = array();

  $membershipType = array(
    'country' => 'Member_Country__lcn',
    'other' => 'Member_Other__lcn',
  );
  // Load FileMaker api
  gbif_stats_load_api();

  // Load credentials
  $IMSCredential = variable_get('ims_connection');

  $IMS = new FileMaker();
  $IMS->setProperty('database', $IMSCredential['database']);
  $IMS->setProperty('hostspec', $IMSCredential['hostname']);
  $IMS->setProperty('username', $IMSCredential['username']);
  $IMS->setProperty('password', $IMSCredential['password']);
  
  $ListNodes_find =& $IMS->newFindCommand('WWWA_Participant_bko');
  $ListNodes_find->addFindCriterion($membershipType[$type], '1');
  $ListNodes_find->addFindCriterion('WWWA_Participant_Region_GBIFarea::GBIFarea', $region_to_load);
  $ListNodes_find->addSortRule('Name_Short', 1, FILEMAKER_SORT_ASCEND);
  $result = $ListNodes_find->execute();

  // Handle error (if any)
  if (FileMaker::isError($result)) {
    echo "Error: " . $result->getMessage() . "\n"; 
  }

  $records['IMS'] = $result->getRecords();
  $participantProfile = array();
  
  // Following the membership definition in the IMS, and use that to decide
  // where on the portal DB to look for information, hence
  // stats_participant_contribution or stats_country_contribution
  foreach($records['IMS'] as $value) {
    $name_short = $value->getField('Name_Short');

    $participantProfile[$name_short] = array();
    $participantProfile[$name_short]['GBIFMembership'] = $value->getField('GBIFmembership');
    $participantProfile[$name_short]['Member_AsOf'] = $value->getField('Member_AsOf');
    $participantProfile[$name_short]['iso_a2'] = $value->getField('__Country::ISO2');
    $participantProfile[$name_short]['MOU2001_Date'] = $value->getField('MOU2001_Date');
    $participantProfile[$name_short]['MOU2001_Signatory'] = $value->getField('MOU2001_Signatory');
      $participantProfile[$name_short]['MOU2001'] = ($participantProfile[$name_short]['MOU2001_Date'] == "" && $participantProfile[$name_short]['MOU2001_Signatory'] == "") ? 'unsigned' : 'signed';
    $participantProfile[$name_short]['MOU2007_Date'] = $value->getField('MOU2007_Date');
    $participantProfile[$name_short]['MOU2007_Signatory'] = $value->getField('MOU2007_Signatory');
      $participantProfile[$name_short]['MOU2007'] = ($participantProfile[$name_short]['MOU2007_Date'] == "" && $participantProfile[$name_short]['MOU2007_Signatory'] == "") ? 'unsigned' : 'signed';
    $participantProfile[$name_short]['MOU2012_Date'] = $value->getField('MOU2012_Date');
    $participantProfile[$name_short]['MOU2012_Signatory'] = $value->getField('MOU2012_Signatory');
      $participantProfile[$name_short]['MOU2012'] = ($participantProfile[$name_short]['MOU2012_Date'] == "" && $participantProfile[$name_short]['MOU2012_Signatory'] == "") ? 'unsigned' : 'signed';
    
    // Decideing queries and keys to use according to membership type
    // Thanks to Jose Curdra for developing the basic query to the Registry
    if ($type == 'country') {
      $key = $value->getField('__Country::ISO2');

      db_set_active('gbrds');
      $query_gbrds_node_count = db_query("SELECT count(uuid) AS count FROM {agent} WHERE agent_type_id = 1 AND deleted IS NULL AND iso_country_code = :memberName", array(':memberName' => $key));
      $query_gbrds_org_count = db_query("SELECT count(a2.uuid) AS count FROM {agent} a1 INNER JOIN {agent_relation} ar1 ON a1.id = ar1.from_agent_id INNER JOIN {agent} a2 ON a2.id = ar1.to_agent_id WHERE a1.agent_type_id = 1 AND a2.agent_type_id = 2 AND a1.deleted IS NULL AND ar1.deleted IS NULL AND a2.deleted IS NULL AND a1.iso_country_code = :memberName", array(':memberName' => $key));
      $query_gbrds_org_list = db_query("SELECT a2.uuid, a2.name FROM {agent} a1 INNER JOIN {agent_relation} ar1 ON a1.id = ar1.from_agent_id INNER JOIN {agent} a2 ON a2.id = ar1.to_agent_id WHERE a1.agent_type_id = 1 AND a2.agent_type_id = 2 AND a1.deleted IS NULL AND ar1.deleted IS NULL AND a2.deleted IS NULL AND a1.iso_country_code = :memberName", array(':memberName' => $key));
      $query_gbrds_resource_count = db_query("SELECT count(a3.uuid) AS count FROM {agent} a1 INNER JOIN {agent_relation} ar1 ON a1.id = ar1.from_agent_id INNER JOIN {agent} a2 ON a2.id = ar1.to_agent_id INNER JOIN {agent_relation} ar2 ON a2.id = ar2.from_agent_id INNER JOIN {agent} a3 ON ar2.to_agent_id = a3.id WHERE a1.agent_type_id = 1 AND a3.agent_type_id = 3 AND a1.deleted IS NULL AND ar1.deleted IS NULL AND a2.deleted IS NULL AND ar2.deleted IS NULL AND a3.deleted IS NULL AND a1.iso_country_code = :memberName", array(':memberName' => $key));
      $query_gbrds_ipt_count = db_query("SELECT count(a3.uuid) AS count FROM {agent} a1 INNER JOIN {agent_relation} ar1 ON a1.id = ar1.from_agent_id INNER JOIN {agent} a2 ON a2.id = ar1.to_agent_id INNER JOIN {agent_relation} ar2 ON a2.id = ar2.from_agent_id INNER JOIN {agent} a3 ON ar2.to_agent_id = a3.id WHERE a1.agent_type_id = 1 AND a3.agent_type_id = 4 AND a1.deleted IS NULL AND ar1.deleted IS NULL AND a2.deleted IS NULL AND ar2.deleted IS NULL AND a3.deleted IS NULL AND a1.iso_country_code = :memberName", array(':memberName' => $key));
      $query_gbrds_checklist_count = db_query("SELECT count(a3.uuid) as count FROM {agent} a1 INNER JOIN {agent_relation} ar1 ON a1.id = ar1.from_agent_id INNER JOIN {agent} a2 ON a2.id = ar1.to_agent_id INNER JOIN {agent_relation} ar2 ON a2.id = ar2.from_agent_id INNER JOIN {agent} a3 ON ar2.to_agent_id = a3.id LEFT JOIN {service} s ON s.agent_id = a3.id WHERE a1.agent_type_id = 1 AND a1.iso_country_code = :memberName AND a3.agent_type_id = 3 AND s.service_type_id = 18 AND a1.deleted IS NULL AND ar1.deleted IS NULL AND a2.deleted IS NULL AND ar2.deleted IS NULL AND a3.deleted IS NULL", array(':memberName' => $key));
      $query_gbrds_checklist = db_query("SELECT a3.uuid FROM {agent} a1 INNER JOIN {agent_relation} ar1 ON a1.id = ar1.from_agent_id INNER JOIN {agent} a2 ON a2.id = ar1.to_agent_id INNER JOIN {agent_relation} ar2 ON a2.id = ar2.from_agent_id INNER JOIN {agent} a3 ON ar2.to_agent_id = a3.id LEFT JOIN {service} s ON s.agent_id = a3.id WHERE a1.agent_type_id = 1 AND a1.iso_country_code = :memberName AND a3.agent_type_id = 3 AND s.service_type_id = 18 AND a1.deleted IS NULL AND ar1.deleted IS NULL AND a2.deleted IS NULL AND ar2.deleted IS NULL AND a3.deleted IS NULL", array(':memberName' => $key));
      db_set_active();
      
      db_set_active('portal');
      $query_portal = db_query("SELECT rollover_id, provider_count, dataset_count, occurrence_count, occurrence_georeferenced_count FROM {stats_country_contribution} WHERE iso_country_code = :ISO ORDER BY rollover_id DESC LIMIT 0,1", array(':ISO' => $key));
      db_set_active();
      
    } else if ($type == 'other') {

      // Get the node name used by the Registry
      db_set_active('postgis');
      $name_relation = db_query("SELECT * FROM {ims.relate_registry} WHERE ims_name_short = :name_short", array(':name_short' => $name_short))->fetchAll();
      $node_name_for_gbrds = isset($name_relation[0]->registry_name) ? $name_relation[0]->registry_name : NULL;
      $gbif_approver = isset($name_relation[0]->gbif_approver) ? $name_relation[0]->gbif_approver : NULL;
      db_set_active();

      db_set_active('gbrds');
      
      // Old logic to get all counts from the registry, but not really works. To be deleted.
      // $query_gbrds = db_query("SELECT rt.name, count(*) as count FROM {agent} a LEFT JOIN {agent_type} at ON at.id = a.agent_type_id LEFT JOIN {agent_relation} ar ON a.id = ar.from_agent_id LEFT JOIN {relation_type} rt ON rt.id = ar.relation_type_id WHERE a.name = :nodeName AND ar.relation_type_id in (1) AND a.deleted is NULL AND ar.deleted is NULL GROUP BY rt.name", array(':nodeName' => $node_name_for_gbrds));
      
      $query_gbrds_node_count = db_query("SELECT count(uuid) AS count FROM {agent} WHERE agent_type_id = 1 AND deleted IS NULL AND name = :nodeName", array(':nodeName' => $node_name_for_gbrds));
      $query_gbrds_org_count = db_query("SELECT count(a2.uuid) AS count FROM {agent} a1 INNER JOIN {agent_relation} ar1 ON a1.id = ar1.from_agent_id INNER JOIN {agent} a2 ON a2.id = ar1.to_agent_id WHERE a1.agent_type_id = 1 AND a2.agent_type_id = 2 AND a1.deleted IS NULL AND ar1.deleted IS NULL AND a2.deleted IS NULL AND a1.name = :nodeName", array(':nodeName' => $node_name_for_gbrds));
      $query_gbrds_org_list = db_query("SELECT a2.uuid, a2.name FROM {agent} a1 INNER JOIN {agent_relation} ar1 ON a1.id = ar1.from_agent_id INNER JOIN {agent} a2 ON a2.id = ar1.to_agent_id WHERE a1.agent_type_id = 1 AND a2.agent_type_id = 2 AND a1.deleted IS NULL AND ar1.deleted IS NULL AND a2.deleted IS NULL AND a1.name = :nodeName", array(':nodeName' => $node_name_for_gbrds));
      $query_gbrds_resource_count = db_query("SELECT count(a3.uuid) as count FROM {agent} a1 INNER JOIN {agent_relation} ar1 ON a1.id = ar1.from_agent_id INNER JOIN {agent} a2 ON a2.id = ar1.to_agent_id INNER JOIN {agent_relation} ar2 ON a2.id = ar2.from_agent_id INNER JOIN {agent} a3 ON ar2.to_agent_id = a3.id WHERE a1.agent_type_id = 1 AND a1.name= :nodeName AND a3.agent_type_id = 3 AND a1.deleted IS NULL AND ar1.deleted IS NULL AND a2.deleted IS NULL AND ar2.deleted IS NULL AND a3.deleted IS NULL", array(':nodeName' => $node_name_for_gbrds));
      $query_gbrds_ipt_count = db_query("SELECT count(a3.uuid) as count FROM {agent} a1 INNER JOIN {agent_relation} ar1 ON a1.id = ar1.from_agent_id INNER JOIN {agent} a2 ON a2.id = ar1.to_agent_id INNER JOIN {agent_relation} ar2 ON a2.id = ar2.from_agent_id INNER JOIN {agent} a3 ON ar2.to_agent_id = a3.id WHERE a1.agent_type_id = 1 AND a1.name= :nodeName AND a3.agent_type_id = 4 AND a1.deleted IS NULL AND ar1.deleted IS NULL AND a2.deleted IS NULL AND ar2.deleted IS NULL AND a3.deleted IS NULL", array(':nodeName' => $node_name_for_gbrds));
      $query_gbrds_checklist_count = db_query("SELECT count(a3.uuid) as count FROM {agent} a1 INNER JOIN {agent_relation} ar1 ON a1.id = ar1.from_agent_id INNER JOIN {agent} a2 ON a2.id = ar1.to_agent_id INNER JOIN {agent_relation} ar2 ON a2.id = ar2.from_agent_id INNER JOIN {agent} a3 ON ar2.to_agent_id = a3.id LEFT JOIN service s ON s.agent_id = a3.id WHERE a1.agent_type_id = 1 AND a1.name = :nodeName AND a3.agent_type_id = 3 AND s.service_type_id = 18 AND a1.deleted IS NULL AND ar1.deleted IS NULL AND a2.deleted IS NULL AND ar2.deleted IS NULL AND a3.deleted IS NULL", array(':nodeName' => $node_name_for_gbrds));
      $query_gbrds_checklist = db_query("SELECT a3.uuid FROM {agent} a1 INNER JOIN {agent_relation} ar1 ON a1.id = ar1.from_agent_id INNER JOIN {agent} a2 ON a2.id = ar1.to_agent_id INNER JOIN {agent_relation} ar2 ON a2.id = ar2.from_agent_id INNER JOIN {agent} a3 ON ar2.to_agent_id = a3.id LEFT JOIN {service} s ON s.agent_id = a3.id WHERE a1.agent_type_id = 1 AND a1.name = :nodeName AND a3.agent_type_id = 3 AND s.service_type_id = 18 AND a1.deleted IS NULL AND ar1.deleted IS NULL AND a2.deleted IS NULL AND ar2.deleted IS NULL AND a3.deleted IS NULL", array(':nodeName' => $node_name_for_gbrds));
      db_set_active();
      
      db_set_active('portal');
      $query_portal = db_query("SELECT rollover_id, provider_count, dataset_count, occurrence_count, occurrence_georeferenced_count FROM {stats_participant_contribution} WHERE gbif_approver = :gbif_approver ORDER BY rollover_id DESC LIMIT 0,1", array(':gbif_approver' => $gbif_approver));
      db_set_active();
    }
    db_set_active('default');
    
    $gbrdsNodeCount = $query_gbrds_node_count->fetchAll();
    $gbrdsOrgCount = $query_gbrds_org_count->fetchAll();   
    $gbrdsOrgList = $query_gbrds_org_list->fetchAll();   
    $gbrdsResourceCount = $query_gbrds_resource_count->fetchAll();
    $gbrdsIPTCount = $query_gbrds_ipt_count->fetchAll();
    $gbrdsChecklistCount = $query_gbrds_checklist_count->fetchAll();
    $gbrdsChecklist = $query_gbrds_checklist->fetchAll();
    
    // Prepare UUIDs to get checklist counts
    $uuid = '';
    $checklistQuery = '';
    $checklistRecordCount = array();
    
    if (!empty($gbrdsChecklist)) {
      for ( $i = 0 ; $i < count($gbrdsChecklist) ; $i++) {
        $uuid .= "'" . $gbrdsChecklist[$i]->uuid . "'";
        if ( $i < count($gbrdsChecklist) - 1 ) {
          $uuid .= ", ";
        }
      }
      // Connect to checklist bank and get SUM()
      db_set_active('checklistbank');
      $checklistQuery = "SELECT sum(num_usages) AS count FROM {checklist} WHERE resource_key IN (" . $uuid . ")";
      $checklistRecordCount = db_query($checklistQuery)->fetchAll();
    }      
    db_set_active('default');

    // Append counts from the Registry      
    $participantProfile[$name_short]['agents']['Node'] = isset($gbrdsNodeCount[0]->count) ? (int) $gbrdsNodeCount[0]->count : 0;
    $participantProfile[$name_short]['agents']['Org'] = isset($gbrdsOrgCount[0]->count) ? (int) $gbrdsOrgCount[0]->count : 0;
    $participantProfile[$name_short]['agents']['OrgList'] = (array) $gbrdsOrgList;
    $participantProfile[$name_short]['agents']['Resource'] = isset($gbrdsResourceCount[0]->count) ? (int) $gbrdsResourceCount[0]->count : 0;
    $participantProfile[$name_short]['agents']['IPT'] = isset($gbrdsIPTCount[0]->count) ? (int) $gbrdsIPTCount[0]->count : 0;
    $participantProfile[$name_short]['agents']['ChecklistDataset'] = isset($gbrdsResourceCount[0]->count) ? (int) $gbrdsChecklistCount[0]->count : 0;
    $participantProfile[$name_short]['agents']['ChecklistRecord'] = isset($checklistRecordCount[0]->count) ? (int) $checklistRecordCount[0]->count : 0;
    
    // Append counts from the Portal
    $portalResult = $query_portal->fetchAll();
    if (isset($portalResult[0])) $participantProfile[$name_short]['stats'] = (array) $portalResult[0];
    if (isset($portalResult[0]) == NULL) {
      $participantProfile[$name_short]['stats'] = array(
        'rollover_id' => 0,
        'provider_count' => 0,
        'dataset_count' => 0,
        'occurrence_count' => 0,
        'occurrence_georeferenced_count' => 0,
      );
    }
    foreach ($participantProfile[$name_short]['stats'] as $k => $v) { $participantProfile[$name_short]['stats'][$k] = (int) $v; }
  
  }

  $records['member'] = $participantProfile;
  unset($records['IMS']);
  return $records;
}

/**
 * Loads FileMaker API if it's not loaded already.
 *
 * @return
 *  TRUE if the FileMaker API is loaded, FALSE otherwise.
 */
function gbif_stats_load_api() {

  if (!class_exists('FileMaker')) {

    // Try using libraries module.
    if (module_exists('libraries')) {

      $libraries_path= drupal_get_path('module', 'libraries');
      $libraries_include = $libraries_path . '/' . 'libraries.module';

      include_once($libraries_include);

      // Let's see if the FileMaker API is really available from libraries.
      $filemaker_api = './' . libraries_get_path('filemakerapi') . '/FileMaker.php';
      if (file_exists($filemaker_api)) {
        include_once $filemaker_api;
      }
    }
  }

  if (!class_exists('FileMaker')) {
    drupal_set_message(t('Can not find FileMaker API. Please place the FileMaker API at sites/all/libraries/filemakerapi/FileMaker. See README.txt for details.'), 'error');
  }
  
  // Tell the caller if the FileMaker class exists.
  return class_exists('FileMaker');
}

/**
 * Implementation of hook_cron()
 */
function gbif_stats_cron() {
  $client_mode = variable_get('gbif_stats_client_mode');
  $interval = variable_get('gbif_stats_update_interval', 3600);
  $last_run = variable_get('gbif_stats_last_update');
  $since = time() - $last_run;
  if ($since >= $interval) {
    $stats = gbif_stats_stats_update($client_mode);
    $geo = geojson_generate($client_mode);
    $publication = publication_generate($client_mode);

    if ($stats != FALSE && $geo != FALSE && $publication != FALSE && $membership_type != FALSE) {
      watchdog('gbif_stats', 'GBIF Regional stats updated.');
      variable_set('gbif_stats_last_update', time());      
    } else {
      watchdog('gbif_stats', 'GBIF Regional stats is not completely updated. Please investigate', NULL, WATCHDOG_WARNING, $link = NULL);
    }
  } else {
    watchdog('gbif_stats', 'GBIF Regional stats is not updated because the update interval is yet reached.');    
  }
}

/*
 * GBIF Region Statistics Update
 * Run through all queries and save results as JSON files.
 */
function gbif_stats_stats_update($client_mode) {

  $regions = variable_get('regions');

  if ($client_mode == FALSE) {
    $membershipsGlobal = array();

    // Iterate through all regions
    foreach($regions as $regionAcronym => $region) {

      $membershipTypes = array(
        'country' => 'Country',
        'other' => 'Other Associate Participants',
      );
      $memberships = array();
      foreach ($membershipTypes as $membershipType => $membershipTitle) {

        $participants = list_participants($membershipType, $region);
        foreach ($participants['member'] as $member => $agent) {
          if (isset($agent['agents'])) $agents = $agent['agents'];
          $membershipsGlobal[$membershipType][$member] = $agent;        
        }
        $memberships[$membershipType] = $participants['member'];
      }

      $occurrenceCount = array();
      foreach($memberships as $node) {
        foreach($node as $nodeName => $statsType) {
          $toPush = array();
          $toPush['nodeTitle'] = $nodeName;

          $membershipAcronym = '';
          switch ($statsType['GBIFMembership']) {
            case 'Voting Participant':
              $membershipAcronym = 'VP';
              break;
            case 'Associate Country Participant';
              $membershipAcronym = 'ACP';
              break;
            case 'Other Associate Participant';
              $membershipAcronym = 'OAP';
              break;
          }

          $toPush['GBIFMembership'] = $membershipAcronym;
          $toPush['iso_a2'] = (isset($statsType['iso_a2'])) ? $statsType['iso_a2'] : '';
          $toPush['Member_AsOf'] = isset($statsType['Member_AsOf']);
          $toPush['MOU2001'] = isset($statsType['MOU2001']);
          $toPush['MOU2007'] = isset($statsType['MOU2007']);
          $toPush['MOU2012'] = isset($statsType['MOU2012']);
          $toPush['nodeCount'] = (isset($statsType['agents']['Node'])) ? $statsType['agents']['Node'] : 0;
          $toPush['orgCount'] = (isset($statsType['agents']['Org'])) ? $statsType['agents']['Org'] : 0;
          $toPush['orgList'] = (isset($statsType['orgList'])) ? $statsType['orgList'] : '';
          $toPush['resourceCount'] = (isset($statsType['agents']['Resource'])) ? $statsType['agents']['Resource'] : 0;
          $toPush['IPTCount'] = (isset($statsType['agents']['IPT'])) ? $statsType['agents']['IPT'] : 0;
          $toPush['ChecklistDataset'] = (isset($statsType['agents']['ChecklistDataset'])) ? $statsType['agents']['ChecklistDataset'] : 0;
          $toPush['ChecklistRecord'] = (isset($statsType['agents']['ChecklistRecord'])) ? $statsType['agents']['ChecklistRecord'] : 0;
          $toPush['providerCount'] = $statsType['stats']['provider_count'];
          $toPush['datasetCount'] = $statsType['stats']['dataset_count'];
          $toPush['occurrenceCount'] = $statsType['stats']['occurrence_count'];
          $toPush['occurrenceGeoCount'] = $statsType['stats']['occurrence_georeferenced_count'];
          array_push($occurrenceCount, $toPush);
        }
      }

      // Chinese Taipei has a territory on the map, so treat it as a country
      // to avoid being displayed as a non-member.
      if ($regionAcronym == 'asia') {
        $chinese_taipei = $memberships['other']['Chinese Taipei'];
        unset($memberships['other']['Chinese Taipei']);
        unset($membershipsGlobal['other']['Chinese Taipei']);
        $memberships['country']['Chinese Taipei'] = $chinese_taipei;
        $membershipsGlobal['country']['Chinese Taipei'] = $chinese_taipei;
      }

      $membershipsJSON = json_encode($memberships); // Get content
      $filename = 'gbif_stats/membership_' . $regionAcronym . '.json'; // Set destination
      $dest_file = file_save_data($membershipsJSON, file_build_uri($filename), FILE_EXISTS_REPLACE); // Save it

      $occurrenceTable = array();
      $occurrenceTable['aaData'] = $occurrenceCount;
      $occurrenceTableJSON = json_encode($occurrenceTable);
      $filenameOccTable = 'gbif_stats/occurrenceTable_' . $regionAcronym . '.json';
      $destOccTable_file = file_save_data($occurrenceTableJSON, file_build_uri($filenameOccTable), FILE_EXISTS_REPLACE);

      $membershipsGlobalJSON = json_encode($membershipsGlobal);
    }    

  } elseif ($client_mode == TRUE) {

    foreach($regions as $regionAcronym => $region) {
      // Get content
      $membership_url = GBIF_STATS_SERVICE_URL . '/membership/' . $regionAcronym;
      $membershipsJSON = file_get_contents($membership_url);
      // Set destination
      $filename = 'gbif_stats/membership_' . $regionAcronym . '.json';
      // Save it
      $dest_file = file_save_data($membershipsJSON, file_build_uri($filename), FILE_EXISTS_REPLACE);
      
      // Get content
      $occurrence_url = GBIF_STATS_SERVICE_URL . '/occurrence/' . $regionAcronym;
      $occurrenceTableJSON = file_get_contents($occurrence_url);
      // Set destination
      $filenameOccTable = 'gbif_stats/occurrenceTable_' . $regionAcronym . '.json';
      // Save it
      $destOccTable_file = file_save_data($occurrenceTableJSON, file_build_uri($filenameOccTable), FILE_EXISTS_REPLACE);
      
    }
    
    $membershipsGlobalJSON = file_get_contents(GBIF_STATS_SERVICE_URL . '/membership/world');
  }

  
  $membershipsGlobalJSON_file = file_save_data($membershipsGlobalJSON, file_build_uri('gbif_stats/membership_world.json'), FILE_EXISTS_REPLACE);
  
  if ($dest_file != FALSE && $destOccTable_file != FALSE && $membershipsGlobalJSON_file != FALSE) {
    drupal_set_message(t('Statistics of participants updated.'));
    return TRUE;
  } else {
    drupal_set_message(t('There was an error in the statistics updating. Please investigate.'), 'warning');
    return FALSE;
  }
}

/*
 * Generates the JSON file for d3.geo to display maps.
 */
function geojson_generate($client_mode) {
  if ($client_mode == FALSE) {
    //$view_region = 'gbif_' . $regionAcronym;
    $sql = "SELECT 'Feature' AS type, iso_a2, name, ST_AsGeoJson(geom_4326) AS geometry FROM gbif_world";
    // geoJSON generation
    try {
      db_set_active('postgis');
      $result = Database::getConnection()->query($sql)->fetchAll();
    } catch (Exception $e) {
      $message = $e->getMessage();
      drupal_set_message(t('There was error in the map updating. Please investigate. @message', array('@message' => $message)), 'error');
      return FALSE;
    }
    db_set_active('default');

    foreach ($result as $v) {
      $v->geometry = json_decode($v->geometry);
    }

    $geo = array();
    $geo['type'] = 'FeatureCollection';
    $geo['features'] = $result;    
    $geoJSON = json_encode($geo);

  } elseif ($client_mode == TRUE) {

    $geoJSON = file_get_contents(GBIF_STATS_SERVICE_URL . '/geo');

  }

  //$geoFile = 'gbif_stats/geo_' . $regionAcronym . '.json';
  $geoFile = 'gbif_stats/geo_world.json';
  $geoFileURI = file_build_uri($geoFile);
  $json_file = file_save_data($geoJSON, $geoFileURI, FILE_EXISTS_REPLACE);
  if ($geoJSON != FALSE && $json_file != FALSE) {
    drupal_set_message(t('Map successfully updated.'));
    return TRUE;
  } else {
    drupal_set_message(t('There was an error in the map updating. Please investigate.'), 'warning');
    return FALSE;
  }
  
}

/*
 * Generate the JSON files for professional paper publication
 * from Mendeley API.
 */
function publication_generate($client_mode) {
  
  if ($client_mode == FALSE) {
    $mendeley_tags = variable_get('mendeley_tags');
    $consumer_key = '571f50a5930cf872cd4c6d129ea99b2b04ffe07de';
    $GBIF_publication = array(); // variable for keeping the final result
    $GBIF_documents = array(); // variable for temporary opertion
    $mendeley_api_group = 'http://api.mendeley.com/oapi/documents/groups/1068301/docs/?details=true&items=40&consumer_key='. $consumer_key;
    $url = $mendeley_api_group;
    $mendeley_curl = curl_init();
    curl_setopt($mendeley_curl, CURLOPT_URL, $url);
    curl_setopt($mendeley_curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($mendeley_curl, CURLOPT_HEADER, true);
    $mendeley_curl_result = curl_exec($mendeley_curl);
    curl_close($mendeley_curl);
    $mendeley_curl_result_byline = explode("\r\n", $mendeley_curl_result);

    // Get the remining available requests from Mendeley. For future use.
    $mendeley_remain_rate = '';
    foreach ($mendeley_curl_result_byline as $line) {
      $header_available = strpos($line, "x-ratelimit-remaining");
      if ($header_available === 0) {
        $header = explode(":", $line);
        $mendeley_remain_rate = trim($header[1]);
      }
    }
    watchdog('gbif_stats', 'Mendeley API rate remaining: @rate', array('@rate' => $mendeley_remain_rate));

    $mendeley_json = end($mendeley_curl_result_byline);
    $mendeley_result = json_decode($mendeley_json);
    unset($mendeley_json);

    $total_results = $mendeley_result->total_results;
    $total_pages = $mendeley_result->total_pages;

    $documents_file = 'gbif_stats/documents.json';
    $documents_file_loc = file_build_uri($documents_file);
    $documents_file_path = drupal_realpath($documents_file_loc);
    $documents_exists = file_exists($documents_file_loc);
    $documents_time = filemtime($documents_file_path);
    $time = time();
    $documents_age = $time - $documents_time;

    if ($documents_age < 21600) {
      $GBIF_documents_content = file_get_contents($documents_file_loc);
      $GBIF_documents = json_decode($GBIF_documents_content);
    } else {
      // Retrieve all documents into one array
      for ($i = 0; $i < $total_pages; $i++) {
        $url_retrieval = $url . '&page=' . $i;
        $mendeley_result = json_decode(file_get_contents($url_retrieval));
        foreach ($mendeley_result->documents as $document) {
          array_push($GBIF_documents, $document);        
        }
      }
      // Save a local copy in case there is no network connection or rate exceeded of Mendeley API.
      $json_file = json_encode($GBIF_documents);
      file_save_data($json_file, $documents_file_loc, FILE_EXISTS_REPLACE);
    }
    // Get rid of unused variable
    unset($GBIF_documents_content);

    // Iterate through all documents and group them according to tags
    foreach ($GBIF_documents as $k => $document ) {
      $tag_to_check = $document->tags;
      // Reduced the size by taking off abstracts.
      if (isset($document->abstract)) unset($document->abstract);

      foreach ($mendeley_tags as $tag) {

        // Ready the container for documents
        if (!isset($GBIF_publication[$tag])) {
          $GBIF_publication[$tag] = new stdClass;
          if (!isset($GBIF_publication[$tag]->documents)) $GBIF_publication[$tag]->documents = array();
        }

        // Dispatch the document to the corresponding tag group
        if ( in_array($tag, $tag_to_check) === TRUE ) {
          $GBIF_publication[$tag]->documents[] = $document;
          unset($GBIF_documents[$k]);
        }

      }

      // Groups the rest into 'others'
      if (isset($GBIF_documents[$k])) {
        if (!isset($GBIF_publication['other'])) {
          $GBIF_publication['other'] = new stdClass;
          if (!isset($GBIF_publication['other']->documents)) $GBIF_publication['other']->documents = array();
        }
        $GBIF_publication['other']->documents[] = $document;
        unset($GBIF_documents[$k]);
      }
    }

    if (count($GBIF_documents) === 0 ) unset($GBIF_documents);

    // The sum of document count of all group is bigger than total_results.
    // Need to check.

    foreach ($GBIF_publication as $tag => $item) {

      // Group documents by year and count them
      $groups_by_year[$tag] = array();
      $total_results_per_group = 0;
      // Only produce 5 yearly groups, counted back from this year.
      $this_year = (int)Date("Y");
      $earliest_year_group = $this_year - 4;
      $earliest_key = '_'.$earliest_year_group;

      foreach ($item->documents as $doc) {
        // Put an underscore in the earliest group of year.
        if (isset($doc->year)) {
          if ($doc->year <= $earliest_year_group) {
            $key = $earliest_key;
          } else {
            $key = $doc->year; 
          }
        }

        if (!isset($groups_by_year[$tag][$key])) {
          $groups_by_year[$tag][$key] = array(
            'documents' => array($doc),
            'count' => 1,
          );
        } else {
          $groups_by_year[$tag][$key]['documents'][] = $doc;
          $groups_by_year[$tag][$key]['count'] += 1;
        }
      }

      // Sort by year under each category
      ksort($groups_by_year[$tag]);

      foreach ($groups_by_year[$tag] as $year => $group) {
        // Sort documents in the earliest year group
        if ($year == $earliest_key) {
          usort($groups_by_year[$tag][$year]['documents'], "cmp");
        }

        // Append only count to the publication.json file
        $GBIF_publication[$tag]->yearly[$year] = $group['count'];
        $total_results_per_group += $group['count'];
      }

      $GBIF_publication[$tag]->total_results = $total_results_per_group;
    }

    // Prepare for dataTable use.
    $GBIF_publication_stats = new stdClass;
    $GBIF_publication_stats->aaData = array();
    array_push($mendeley_tags, 'other');

    // Append counts for dataTable
    for ($i = $earliest_year_group; $i <= $this_year; $i++ ) {
      $to_append = new stdClass;
      $to_append->year = $i;
      $yearly_total = 0;
      foreach ($mendeley_tags as $tag) {
        if ($i == $earliest_year_group) {
          $year_group = '_'.$i;
        } else {
          $year_group = $i;
        }
        $to_append->$tag = $groups_by_year[$tag][$year_group]['count'];
        $yearly_total += $groups_by_year[$tag][$year_group]['count'];
      }
      $to_append->total = $yearly_total;
      $GBIF_publication_stats->aaData[] = $to_append;

    }

    // There are three results to be used: $GBIF_publication, $GBIF_publication_stats, $groups_by_year.

    $json_file = json_encode($GBIF_publication_stats);
    
  } elseif ($client_mode == TRUE) {
    
    $json_file = file_get_contents(GBIF_STATS_SERVICE_URL . '/publication');
    
  }

  $publication_file = 'gbif_stats/publication_stats.json';
  $publication_saved = file_save_data($json_file, file_build_uri($publication_file), FILE_EXISTS_REPLACE);
  if ($publication_saved != FALSE) {
    drupal_set_message(t('Publication successfully updated.'));
    return TRUE;
  } else {
    drupal_set_message(t('There was an error in the publication updating. Please investigate.'), 'warning');
    return FALSE;
  }
}

/*
 * Helper function for sorting documents withing the earliest year group
 */
function cmp($a, $b) {
  return $a->year - $b->year;
}